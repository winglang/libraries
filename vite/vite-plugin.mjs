import { mkdir, writeFile } from "node:fs/promises";
import { dirname } from "node:path";
import { fileURLToPath } from "node:url";

const PLUGIN_NAME = "@winglibs/vite";

/**
 * @return {import("vite").Plugin}
 */
export const plugin = (options) => {
  /**
   * @type {{
   *  root?: string;
   * }}
   */
  const context = {};
  return {
    name: PLUGIN_NAME,
    configResolved(config) {
      context.root = config.root;
    },
    transformIndexHtml(html) {
      return {
        html,
        tags: [
          {
            tag: "script",
            children: `window.${
              options.publicEnvName
            }=Object.freeze({env:Object.freeze(${JSON.stringify(
              options.publicEnv
            )})});`,
            injectTo: "head-prepend",
          },
        ],
      };
    },
    async buildStart() {
      if (!options.generateTypeDefinitions) {
        return;
      }

      if (!context.root) {
        throw new Error("[root] is missing");
      }

      const root = `file://${context.root}/`;

      this.info("Generating type definitions...");
      let dts = [
        `// Generated by \`${PLUGIN_NAME}\`. Do not edit.`,
        `/** Holds environment variables generated from Wing. */`,
        "interface WingEnv {",
      ];
      try {
        for (const [key, value] of Object.entries(options.publicEnv)) {
          const type = typeof value === "string" ? "string" : "unknown";
          dts.push(`\treadonly ${key}: ${type};`);
        }
      } catch (error) {
        this.error(
          error instanceof Error
            ? error
            : new Error("Unknown error", { cause: error })
        );
      }
      dts.push(
        "}",
        "interface Wing { env: WingEnv; }",
        `declare var ${options.publicEnvName}: Wing;`,
        "interface Window {",
        `\treadonly ${options.publicEnvName}: Wing;`,
        "}",
        ""
      );

      const dtsFilename = new URL(options.typeDefinitionsFilename, root);
      let path = dirname(fileURLToPath(dtsFilename));
      await mkdir(path, { recursive: true });
      await writeFile(dtsFilename, dts.join("\n"));
    },
  };
};
