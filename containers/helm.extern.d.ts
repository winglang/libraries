export default interface extern {
  toHelmChart: (wingdir: string, chart: Chart) => string,
}
/** Trait marker for classes that can be depended upon.
The presence of this interface indicates that an object has
an `IDependable` implementation.

This interface can be used to take an (ordering) dependency on a set of
constructs. An ordering dependency implies that the resources represented by
those constructs are deployed before the resources depending ON them are
deployed. */
export interface IDependable {
}
/** Represents a construct. */
export interface IConstruct extends IDependable {
}
/** Represents the building block of the construct graph.
All constructs besides the root construct must be created within the scope of
another construct. */
export class Construct implements IConstruct {
  /** Returns a string representation of this construct. */
  readonly toString: () => string;
}
/** Utility for applying RFC-6902 JSON-Patch to a document.
Use the the `JsonPatch.apply(doc, ...ops)` function to apply a set of
operations to a JSON document and return the result.

Operations can be created using the factory methods `JsonPatch.add()`,
`JsonPatch.remove()`, etc.
const output = JsonPatch.apply(input,
 JsonPatch.replace('/world/hi/there', 'goodbye'),
 JsonPatch.add('/world/foo/', 'boom'),
 JsonPatch.remove('/hello')); */
export class JsonPatch {
}
/** OwnerReference contains enough information to let you identify an owning object.
An owning object must be in the same namespace as the dependent, or
be cluster-scoped, so there is no namespace field. */
export interface OwnerReference {
  /** API version of the referent. */
  readonly apiVersion: string;
  /** If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed.
  Defaults to false. To set this field, a user needs "delete"
  permission of the owner, otherwise 422 (Unprocessable Entity) will be
  returned. */
  readonly blockOwnerDeletion?: (boolean) | undefined;
  /** If true, this reference points to the managing controller. */
  readonly controller?: (boolean) | undefined;
  /** Kind of the referent.
  @see https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
  readonly kind: string;
  /** Name of the referent.
  @see http://kubernetes.io/docs/user-guide/identifiers#names */
  readonly name: string;
  /** UID of the referent.
  @see http://kubernetes.io/docs/user-guide/identifiers#uids */
  readonly uid: string;
}
/** Object metadata. */
export class ApiObjectMetadataDefinition {
  /** Adds an arbitrary key/value to the object metadata. */
  readonly add: (key: string, value?: any) => void;
  /** Add an annotation. */
  readonly addAnnotation: (key: string, value: string) => void;
  /** Add one or more finalizers. */
  readonly addFinalizers: (finalizers: (readonly (string)[])) => void;
  /** Add a label. */
  readonly addLabel: (key: string, value: string) => void;
  /** Add an owner. */
  readonly addOwnerReference: (owner: OwnerReference) => void;
  /** @returns a value of a label or undefined */
  readonly getLabel: (key: string) => string | void;
  /** The name of the API object.
  If a name is specified in `metadata.name` this will be the name returned.
  Otherwise, a name will be generated by calling
  `Chart.of(this).generatedObjectName(this)`, which by default uses the
  construct path to generate a DNS-compatible name for the resource. */
  readonly name?: (string) | undefined;
  /** The object's namespace. */
  readonly namespace?: (string) | undefined;
  /** Synthesizes a k8s ObjectMeta for this metadata set. */
  readonly toJson: () => any;
}
export class ApiObject extends Construct {
  /** Create a dependency between this ApiObject and other constructs.
  These can be other ApiObjects, Charts, or custom. */
  readonly addDependency: (dependencies: (readonly (IConstruct)[])) => void;
  /** Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
    kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true)); */
  readonly addJsonPatch: (ops: (readonly (JsonPatch)[])) => void;
  /** The group portion of the API version (e.g. `authorization.k8s.io`). */
  readonly apiGroup: string;
  /** The object's API version (e.g. `authorization.k8s.io/v1`). */
  readonly apiVersion: string;
  /** The chart in which this object is defined. */
  readonly chart: Chart;
  /** The object kind. */
  readonly kind: string;
  /** Metadata associated with this API object. */
  readonly metadata: ApiObjectMetadataDefinition;
  /** The name of the API object.
  If a name is specified in `metadata.name` this will be the name returned.
  Otherwise, a name will be generated by calling
  `Chart.of(this).generatedObjectName(this)`, which by default uses the
  construct path to generate a DNS-compatible name for the resource. */
  readonly name: string;
  /** Renders the object to Kubernetes JSON.
  To disable sorting of dictionary keys in output object set the
  `CDK8S_DISABLE_SORT` environment variable to any non-empty value. */
  readonly toJson: () => any;
}
export class Chart extends Construct {
  /** Create a dependency between this Chart and other constructs.
  These can be other ApiObjects, Charts, or custom. */
  readonly addDependency: (dependencies: (readonly (IConstruct)[])) => void;
  /** Returns all the included API objects. */
  readonly apiObjects: (readonly (ApiObject)[]);
  /** Generates a app-unique name for an object given it's construct node path.
  Different resource types may have different constraints on names
  (`metadata.name`). The previous version of the name generator was
  compatible with DNS_SUBDOMAIN but not with DNS_LABEL.
  
  For example, `Deployment` names must comply with DNS_SUBDOMAIN while
  `Service` names must comply with DNS_LABEL.
  
  Since there is no formal specification for this, the default name
  generation scheme for kubernetes objects in cdk8s was changed to DNS_LABEL,
  since itâ€™s the common denominator for all kubernetes resources
  (supposedly).
  
  You can override this method if you wish to customize object names at the
  chart level. */
  readonly generateObjectName: (apiObject: ApiObject) => string;
  /** Labels applied to all resources in this chart.
  This is an immutable copy. */
  readonly labels: Readonly<Record<string, string>>;
  /** The default namespace for all objects in this chart. */
  readonly namespace?: (string) | undefined;
  /** Renders this chart to a set of Kubernetes JSON resources.
  @returns array of resource manifests */
  readonly toJson: () => (readonly (any)[]);
}